package de.tu_dortmund.javatemplates.template;

import java.util.List;
import java.util.Map;

import org.eclipse.jdt.core.dom.CompilationUnit;

/**
 * Interface for adding more Templates using different delimiters.
 * 
 * @author Timo Etzold
 *
 */
public interface ITemplate{
  
  /**
   * Returns the regex to be used to find {@link TemplateVariable}s in a java template. <br>
   * The regex has to consist of two named capturing groups: {@code name} and {@code type}<br>
   * <br>
   * Example: {@code "\\$\\{(?&lt;name&gt;\\w+):(?&lt;type&gt;\\w+)\\}"}
   * 
   * @return the regex used to find {@code TemplateVariable}s
   */
  public String getRegex();
  
  /**
   * Sets the source code of the template file which the instance is belonging to.
   * 
   * @param sCode the source code of the template
   */
  public void setCode(String sCode);
  
  /**
   * Returns the source code of the instance.
   * 
   * @return the source code of the template
   */
  public String getCode();

  /**
   * Sets the List of {@link TemplateVariable}s inside the template. <br>
   * This method is used by the {@link TemplateFactory} to add the variables.
   * 
   * @param templateVariables a list of {@link TemplateVariable}s for this template
   */
  public void setTemplateVariables(List<TemplateVariable> templateVariables);
  
  /**
   * Returns the list of {@link TemplateVariable}s of this template. <br>
   * The list is generated by the {@link TemplateFactory}.
   * 
   * @return the list of {@link TemplateVariable}s inside this template
   */
  public List<TemplateVariable> getTemplateVariables();
  
  /**
   * Adds a {@link TemplateVariable} to the list of {@code TemplateVariables} of this template.
   * 
   * @param templateVariable the {@link TemplateVariable} to add
   */
  public void addTemplateVariable(TemplateVariable templateVariable);
  
  /**
   * Removes a {@link TemplateVariable} from the list of {@code TemplateVariables} of this template.
   * 
   * @param templateVariable the {@link TemplateVariable} to remove
   */
  public void removeTemplateVariable(TemplateVariable templateVariable);
  
  /**
   * Inserts the code from the {@link Map} into each {@link TemplateVariable} and parses the resulting Code into a {@link CompilationUnit}. <br>
   * {@link IllegalArgumentException} is to be thrown on errors.
   * 
   * @param attributes the {@link Map} containing the code for each {@link TemplateVariable}
   * @return the {@link CompilationUnit} that is parsed after inserting the {@code TemplateVariables}
   * @throws IllegalArgumentException if<br> 
   * - a {@link TemplateVariable} has errors or <br>
   * - the {@link Map} has errors
   */
  public CompilationUnit fillTemplate(Map<String, String> attributes) throws IllegalArgumentException;
}
